# include <cstdio>
# include <iostream>
# include <algorithm>
# include <vector>
using namespace std;
# define MAX 123
# define inf 99999999
int edge[MAX][MAX];
int book[MAX];
int dis[MAX];
int father[MAX];
vector<int>path;
int n,m;
vector<int>get_path( int s, int t )
{
    vector<int>path;
    for ( ;t!=0;t = father[t] ) {
        path.push_back(t);
    }
    path.push_back(s);
    reverse(path.begin(),path.end());
    return path;
}
void dijkstra( int s )
{
    for ( int i = 1;i <= n;i++ ) {
        dis[i] = edge[s][i];
    }
    for ( int i = 1;i <= n;i++ ) {
        book[i] = 0;
    }
    book[s] = 1;
    for ( int i = 1;i <= n;i++ ) {
        father[i] = 0;
    }
    int u,v;
    for ( int i = 1;i <= n-1;i++ ) {
        int _min = inf;
        for ( int j = 1;j <= n;j++ ) {
            if ( book[j]==0 && dis[j] < _min ) {
                _min = dis[j];
                u = j;
            }
        }
        book[u] = 1;
        for ( int v = 1;v <= n;v++ ) {
            if ( edge[u][v] < inf ) {
                if ( dis[v] > dis[u]+edge[u][v ] ) {
                    dis[v] = dis[u]+edge[u][v];
                    father[v] = u;
                }
            }
        }
    }

}
int main(void)
{
    scanf("%d %d",&n,&m);
    for ( int i = 1;i <= n;i++ ) {
        for ( int j = 1;j <= n;j++ ) {
            if ( i==j ) {
                edge[i][j] = 0;
            }
            else {
                edge[i][j] = inf;
            }
        }
    }
    for ( int i = 1;i <=n;i++ ) {
        father[i] = 0;
    }
    for ( int i = 0;i < m;i++ ) {
        int t1, t2, t3; scanf("%d %d %d",&t1,&t2,&t3);
        edge[t1][t2] = t3;
    }
    cout<<endl;


    int s, t; scanf("%d %d",&s,&t);
    dijkstra(s);
    path = get_path(s,t);
    printf ("start: v%d\nend: v%d\nlength: %d\n",1,t,dis[t]);
    //printf ("%d->%d : %d ",1,t,dis[t]);
    printf("node list: ");
    for ( int k = 0;k < path.size();k++ ) {
        cout<<"v"<<path[k]<<" ";
    }
    cout<<endl;

    return 0;
}
